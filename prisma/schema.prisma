// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") 
//   directUrl = env("POSTGRES_URL_NON_POOLING") 
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" 
}

// -------- MODELOS -------

model User {
  id         Int         @id @default(autoincrement())
  country    String?     
  username   String      @unique
  email      String      @unique
  password   String
  owner      Boolean     @default(false) 
  avatarUrl  String?
  birthDate  DateTime?
  bio        String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  reviews    Review[]    @relation("UserReviews")
  restaurants Restaurant[] // Relación uno a muchos  
  favorites  Favorite[]  // Relación con favoritos
}

model Restaurant {
  id            Int          @id @default(autoincrement())
  userId        Int          //Ya no va ser unico porque puede haber varios restaurantes
  name          String
  cityId        Int
  location      String
  phone         String?
  averageRating Float?       @default(0)
  imageUrl      String?      
  logoUrl       String?      
  description   String?
  openingHours  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  city          City         @relation(fields: [cityId], references: [id])
  category      RestaurantCategory[]  // Relacion con la tabla intermedia
  favorites     Favorite[]  
  reviews       Review[] 
}

model Review {
  id           Int           @id @default(autoincrement())
  comment      String?
  rating       Int           // 1 - 5
  restaurantId Int
  userId       Int
  images       ReviewImage[]
  createdAt    DateTime       @default(now())
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User           @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
}

model ReviewImage {
  id           Int           @id @default(autoincrement())
  imgUrl       String
  reviewId     Int
  createdAt    DateTime       @default(now())
  review       Review         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model City {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  restaurants  Restaurant[]
}


model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  restaurants  RestaurantCategory[]  // Relacion con la tabla intermedia
}

model RestaurantCategory {
  restaurantId Int
  categoryId    Int
  // Relaciones 
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([restaurantId, categoryId])
}

// Opcional para favoritos:
model Favorite {

  userId       Int
  restaurantId Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId])
}
